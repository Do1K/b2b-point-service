name: CI-CD with Docker to Oracle Cloud

on:
  push:
    branches:
      - deploy

env:
  # GitHub Container Registry 주소와 이미지 이름을 환경 변수로 설정
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }} # 예: your-username/your-repo-name

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # 변경된 부분: Gradle 빌드 작업의 working-directory 지정
      - name: Build with Gradle
        working-directory: ./b2b-point # gradlew 파일이 있는 b2b-point 폴더에서 실행
        run: |
          chmod +x ./gradlew
          ./gradlew build -x test

      - name: Log in to the Container registry
        # ... (이하 동일) ...

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: . # Dockerfile이 최상위 루트에 있으므로 context는 '.' 그대로 유지
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}

  deploy-to-oracle:
    needs: build-and-push-image # 'build-and-push-image' 작업이 성공해야만 실행됨
    runs-on: ubuntu-latest

    steps:
      # 1. Oracle 서버에 배포용 docker-compose.prod.yml 파일 복사
      - name: Copy docker-compose.prod.yml to Oracle Server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.ORACLE_HOST }}
          username: ${{ secrets.ORACLE_USERNAME }}
          key: ${{ secrets.ORACLE_SSH_KEY }}
          source: "docker-compose.prod.yml" # 프로젝트의 docker-compose.prod.yml 파일
          target: "/home/opc/app"            # 서버의 배포 폴더

      # 2. SSH로 서버에 접속하여 Docker Compose 실행
      - name: Execute deployment script on Oracle Server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.ORACLE_HOST }}
          username: ${{ secrets.ORACLE_USERNAME }}
          key: ${{ secrets.ORACLE_SSH_KEY }}
          script: |
            cd /home/opc/app # 배포 폴더로 이동

            # GitHub Container Registry에 로그인
            echo ${{ secrets.CR_PAT }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
            
            # docker-compose.prod.yml을 사용하여 최신 이미지로 컨테이너를 다시 시작
            # --pull always: 실행 전에 항상 최신 이미지를 받아오도록 강제
            # -d: 백그라운드에서 실행
            docker compose -f docker-compose.prod.yml --pull always up -d --remove-orphans
            
            # 사용하지 않는 오래된 Docker 이미지 정리
            docker image prune -af
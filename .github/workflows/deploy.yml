name: CI-CD with Docker to Oracle Cloud

on:
  push:
    branches:
      - deploy

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository | tolower }}

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Build with Gradle
        working-directory: ./b2b-point
        run: |
          chmod +x ./gradlew
          ./gradlew build -x test

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}

  deploy-to-oracle:
    needs: build-and-push-image
    runs-on: ubuntu-latest

    steps:
      - name: Copy docker-compose.prod.yml to Oracle Server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.ORACLE_HOST }}
          username: ${{ secrets.ORACLE_USERNAME }}
          key: ${{ secrets.ORACLE_SSH_KEY }}
          source: "docker-compose.prod.yml"
          target: "/home/opc/app"

      - name: Execute deployment script on Oracle Server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.ORACLE_HOST }}
          username: ${{ secrets.ORACLE_USERNAME }}
          key: ${{ secrets.ORACLE_SSH_KEY }}
          script: |
            cd /home/opc/app

            echo ${{ secrets.CR_PAT }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
            
            # 환경 변수 설정
            export IMAGE_TAG=${{ github.sha }}
            export GITHUB_REPOSITORY_LOWER=${{ env.IMAGE_NAME }} # 소문자로 변환된 이미지 이름을 환경변수로 주입
            
            docker compose -f docker-compose.prod.yml up -d --remove-orphans --pull always
            
            docker image prune -af